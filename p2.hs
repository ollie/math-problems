-- Problem 2
-- Even Fibonacci numbers

-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million,
-- find the sum of the even-valued terms.

main = do
  let answer = fibonacciEvensSum 40
  putStrLn ("And the answer is: " ++ show answer)

fibonacci :: Integral a => a -> a
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

fibonaccies :: Integral a => [a] -> [a] -> [a]
fibonaccies []     acc = acc
fibonaccies (x:xs) acc
  | fibValue > 4000000 = fibonaccies [] acc
  | otherwise          = fibonaccies xs (fibValue : acc)
  where fibValue = fibonacci x

fibonacciEvensSum :: Integral a => a -> a
fibonacciEvensSum x = sum $ filter even (fibonaccies [1..x] [])
